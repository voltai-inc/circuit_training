# Use the NVIDIA CUDA base image with cuDNN and Ubuntu 20.04
ARG base_image="nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04"
FROM $base_image

LABEL maintainer="tobyboyd@google.com"

# Define build arguments
ARG python_version="python3.9"
ARG tf_agents_version="tf-agents==0.15.0"  # Specify compatible tf-agents version
ARG dreamplace_version="dreamplace_python3.9.tar.gz"
ARG placement_cost_binary="plc_wrapper_main"
ARG APT_COMMAND="apt-get -o Acquire::Retries=3 -y"

# Set non-interactive mode for apt
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles

# Install basic utilities
RUN ${APT_COMMAND} update && ${APT_COMMAND} install -y --no-install-recommends \
        software-properties-common \
        curl \
        tmux \
        vim \
        less

# Add repository for Python versions
RUN add-apt-repository ppa:deadsnakes/ppa

# Install Python and related tools
RUN ${APT_COMMAND} update && ${APT_COMMAND} install -y --no-install-recommends \
        $python_version-dev \
        $python_version-distutils

# Download and install the placement cost utility binary
RUN curl https://storage.googleapis.com/rl-infra-public/circuit-training/placement_cost/${placement_cost_binary} \
     -o /usr/local/bin/plc_wrapper_main

RUN chmod 555 /usr/local/bin/plc_wrapper_main

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py
RUN $python_version get-pip.py

# Install system dependencies needed by DREAMPlace
RUN apt-get update \
        && apt-get install -y \
            wget \
            flex \
            libcairo2-dev \
            libboost-all-dev \
        && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

# Install Python packages required by DREAMPlace
RUN $python_version -mpip install --no-cache-dir \
        pyunpack>=0.1.2 \
        patool>=1.12 \
        timeout-decorator>=0.5.0 \
        matplotlib>=2.2.2 \
        cairocffi>=0.9.0 \
        pkgconfig>=1.4.0 \
        setuptools>=39.1.0 \
        scipy>=1.1.0 \
        numpy>=1.15.4 \
        torch==1.13.1 \
        shapely>=1.7.0

# Install TensorFlow with GPU support
RUN $python_version -mpip install --no-cache-dir tensorflow==2.13.0

# Install tf-agents
RUN $python_version -mpip install --no-cache-dir $tf_agents_version sortedcontainers tox pytest

# Install Reverb compatible with TensorFlow 2.13.0
RUN $python_version -mpip install --no-cache-dir dm-reverb==0.4.0

# Install CuDNN to match TensorFlow requirements
RUN case $base_image in \
       *"nvidia"*) $python_version -mpip install --force-reinstall nvidia-cudnn-cu11~=8.6.0.0 ;; \
       *       ) echo "Skip installing CuDNN. This is a CPU only image!!!" ;; \
    esac 

# Setup DREAMPlace
RUN mkdir -p /dreamplace
RUN curl https://storage.googleapis.com/rl-infra-public/circuit-training/dreamplace/$dreamplace_version -o /dreamplace/dreamplace.tar.gz
RUN tar xzf /dreamplace/dreamplace.tar.gz -C /dreamplace/

# Set PYTHONPATH to include DREAMPlace directories
ENV PYTHONPATH "${PYTHONPATH}:/dreamplace:/dreamplace/dreamplace"

# Freeze Python packages for verification
RUN $python_version -m pip freeze

# Install 32-bit libraries if needed
RUN dpkg --add-architecture i386
RUN apt update
RUN apt install -y libc6:i386 libncurses5:i386 libstdc++6:i386

# Default command
CMD ["/bin/bash"]
